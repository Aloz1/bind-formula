{%- from "bind/map.jinja" import map with context -%}
{%- macro zone(name, args = {}) -%}
zone "{{ name }}" {
{%- set file_prefix = map.dynamic_dir + '/' if 'allow-update' in args or 'update-policy' in args or args['type'] == 'slave' else '' %}
{%- set file_suffix = '.jnl' if args['type'] == 'slave' else '' %}
    type {{ args['type'] }};

{%- if args['notify'] is defined %}
    notify {{ args['notify']|lower }};
{%- endif %}

{%- if args['type'] in ['delegation-only', 'hint', 'master', 'redirect', 'slave'] or (args['file'] is defined and args['file'] != '' and args['type'] != 'forward') %}
    file "{{ file_prefix }}named.{{ args['file']|default(name) }}{{ file_suffix }}";
{%- endif %}

{%- if args['masters'] is defined %}
    masters {
        {% for master in args['masters'] -%} {{ master }}; {%- endfor %}
    };
{%- endif %}

{%- if args['forwarders'] is defined and args['forwarders'] is iterable %}
    forward {{ args['forward']|default('first') }};
    forwarders {
    {%- for forwarder in args['forwarders'] %}
        {{ forwarder }};
    {%- endfor %}
    };
{%- endif %}

{%- if args['update-policy'] is defined and args['update-policy'] is iterable %}
    update-policy {
    {%- for policy in args['update-policy'] %}
        {{ policy }};
    {%- endfor %}
    };
{%- elif args['allow-update'] is defined and args['allow-update'] is iterable %}
    allow-update {
    {% for match in args['allow-update'] %}
        {{ match }};
    {%- endfor %}
    };
{%- endif %}

{%- if args['allow-transfer'] is defined and args['allow-transfer'] is iterable %}
    allow-transfer {
    {% for match in args['allow-transfer'] %}
        {{ match }};
    {% endfor %}
    };
{%- endif %}

{%- if args['also-notify'] is defined and args['also-notify'] is iterable %}
    also-notify {
    {% for match in args['also-notify'] %}
        {{ match }};
    {% endfor %}
    };
{%- endif %}

};
{%- endmacro -%}

{%- macro add_zones(zones) -%}
{% set root_args = map.root_zone_default %}
{% do root_args.update(zones['.']) %}
{{ zone('.', root_args) }}

{% for name, args in zones.items() -%}
{% if not name == '.' -%}
{{ zone(name, args) }}
{% endif %}
{% endfor %}
{% endmacro -%}
